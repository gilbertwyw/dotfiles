" vim:fdm=marker
set nocompatible
" otherwise NERDTree shows strange character instead of arrows
set encoding=utf-8

" Plugin: vim-plug {{{
if empty(glob('~/.vim/autoload/plug.vim'))
  !mkdir -p ~/.vim/autoload
  !curl -fLo ~/.vim/autoload/plug.vim
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

" vim-plug, install under ~/.vim/plugged
call plug#begin('~/.vim/plugged')
" Plugins {{{
" General {{{
Plug 'Lokaltog/vim-easymotion'
Plug 'Raimondi/delimitMate'
Plug 'Shougo/unite.vim'
Plug 'Valloric/MatchTagAlways'
Plug 'Valloric/YouCompleteMe', { 'do': './install.sh' }
Plug 'Yggdroot/indentLine'
Plug 'airblade/vim-gitgutter'
Plug 'bling/vim-airline'
Plug 'editorconfig/editorconfig-vim'
Plug 'junegunn/vim-easy-align'
Plug 'junegunn/vim-emoji'
Plug 'kien/rainbow_parentheses.vim'
Plug 'kshenoy/vim-signature'
Plug 'myusuf3/numbers.vim'
Plug 'rking/ag.vim'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/syntastic'
Plug 'terryma/vim-multiple-cursors'
Plug 'tommcdo/vim-exchange'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-characterize'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
" }}}
" colorscheme {{{
Plug 'chriskempson/base16-vim'
Plug 'chriskempson/tomorrow-theme', { 'rtp': 'vim' }
Plug 'daylerees/colour-schemes', { 'rtp': 'vim' }
Plug 'flazz/vim-colorschemes'
Plug 'junegunn/seoul256.vim'
" }}}
" Git {{{
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-git'
" }}}
" Front-End {{{
Plug 'ap/vim-css-color', { 'for': ['css', 'scss', 'sass'] }
Plug 'digitaltoad/vim-jade', { 'for': 'jade' }
Plug 'jelera/vim-javascript-syntax'
Plug 'kchmck/vim-coffee-script', { 'for': 'coffee' }
Plug 'maksimr/vim-jsbeautify'
Plug 'marijnh/tern_for_vim', { 'do': 'npm i' }
Plug 'mattn/emmet-vim'
Plug 'moll/vim-node'
Plug 'othree/html5.vim'
" }}}
" snippets {{{
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
" }}}
" Unite's deps {{{
Plug 'Shougo/neomru.vim'
Plug 'Shougo/vimproc.vim', { 'do': 'make' }
" }}}
" clojure & clojurescript {{{
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }
Plug 'vim-scripts/paredit.vim', { 'for': 'clojure' }
" }}}
" }}}
call plug#end()
" }}}

" Allow hidden buffers, don't limit to 1 file per window/split
set hidden

set number

" turn off backup for now
set nobackup
set noswapfile

" change the terminal's title
set title

" highlight current line
set cursorline

" enable mouse in all modes
set mouse=a

" toggle paste mode
set pastetoggle=<F2>

silent! colorscheme Tomorrow-Night

"let mapleader=','
let mapleader = "\<Space>"

" Indentation {{{
" use soft tab
set expandtab
" number of visual spaces per TAB
set tabstop=2
" number of space to use for autoindenting
set shiftwidth=2
" }}}
" Mappings {{{
" jk is escape
inoremap jk <Esc>

" move vertically by visual line
nnoremap j gj
nnoremap k gk

" swap the jump keys
nnoremap ' `
nnoremap ` '

" Part of the Right Hand system, http://reefpoints.dockyard.com/2013/09/11/vim-staying-on-home-row-via-map.html
" in INSERT mode, save & back to INSERT mode
inoremap ;j <C-O>:update<CR>
" in NORMAL mode, save & back to NORMAL mode
nnoremap ;j :update<CR>

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" Disable all arrow keys
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

map <F5> :setlocal spell! spelllang=en_us<CR>

nnoremap <leader>ev :vsp $MYVIMRC<CR>
nnoremap <leader>sv :so $MYVIMRC<CR>

vnoremap Y "*y
" In normal mode, do the same with the current line
nnoremap Y "*yy
" }}}
" Navigation {{{
" Tab {{{
noremap <S-l> gt
noremap <S-h> gT
" }}}
" Window {{{
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
" clash with Unite's redraw
"noremap <C-l> <C-w>l
" }}}
" }}}
" Search {{{
set hlsearch
set ignorecase
set smartcase
" turn off search highlight
nnoremap <silent> <leader><space> :noh<CR>
" }}}
" Plugin: ag.vim {{{
nnoremap <leader>g :Ag -i<space>
" }}}
" Plugin: EasyMotion {{{
" Bi-directional find motion
" Jump to anywhere you want with minimal keystrokes, with just one key binding.
" `s{char}{label}`
nmap s <Plug>(easymotion-s)
" or
" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
nmap s <Plug>(easymotion-s2)
" Turn on case sensitive feature
let g:EasyMotion_smartcase = 1
" JK motions: Line motions
map <leader>j <Plug>(easymotion-j)
map <leader>k <Plug>(easymotion-k)
" }}}
" Plugin: NERDTree {{{
" NERDTree mirror mode by default
map <silent> <leader>n :NERDTreeToggle<CR> :NERDTreeMirror<CR>
" }}}
" Plugin: numbers.vim {{{
nnoremap <F3> :NumbersToggle<CR>
nnoremap <F4> :NumbersOnOff<CR>
" }}}
" Plugin: syntastic {{{
" syntastic: error:
"   your shell /usr/local/bin/fish doesn't use traditional UNIX syntax for redirections
set shell=/bin/sh
let g:syntastic_javascript_checkers = ['jsxhint']
" }}}
" Plugin: tern_for_vim {{{
let g:tern_show_argument_hints='on_hold'
nmap <leader>tD :TernDoc<CR>
nmap <leader>tb :TernDocBrowse<CR>
nmap <leader>td :TernDef<CR>
nmap <leader>tr :TernRefs<CR>
nmap <leader>tR :TernRename<CR>
" }}}
" Plugin: UltiSnips {{{
" to avoid conflict with YouCompleteMe
set rtp+=~/dotfiles/vim/
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsSnippetsDir="~/dotfiles/vim/snips/"
let g:UltiSnipsSnippetDirectories=["UltiSnips", "snips"]
" }}}
" Plugin: Unite {{{
nnoremap <leader>b :<C-u>Unite buffer<CR>
nnoremap <leader>f :<C-u>Unite file_mru buffer file<CR>

" recursive file search, start insert automatically and using fuzzy file matching
call unite#filters#matcher_default#use(['matcher_fuzzy'])
nnoremap <leader>r :<C-u>Unite -start-insert file_rec/async:!<CR>

let g:unite_source_file_rec_max_cache_files = 0
call unite#custom#source('file_rec,file_rec/async', 'max_candidates', 0)

" search through yank history
let g:unite_source_history_yank_enable = 1
nnoremap <leader>y :<C-u>Unite history/yank<CR>

if executable('pt')
  let g:unite_source_grep_command = 'pt'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor'
  let g:unite_source_grep_recursive_opt = ''
  let g:unite_source_grep_encoding = 'utf-8'
  " not ignoring .gitignore files
  let g:unite_source_rec_async_command = 'pt --nocolor --nogroup -g .'
endif
" }}}
" Plugin: vim-easy-align {{{
" Start interactive EasyAlign in visual mode
vmap <Enter> <Plug>(EasyAlign)
" Start interactive EasyAlign with a Vim movement
nmap <leader>a <Plug>(EasyAlign)
" }}}
" Plugin: vim-emoji {{{
" trigger by CTRL-X CTRL-U in INSERT mode with terminal vim
" Using Emojis as Git Gutter symbols, work only with terminal vim(?)
silent! if emoji#available()
  let g:gitgutter_sign_added = emoji#for('small_blue_diamond')
  let g:gitgutter_sign_modified = emoji#for('small_orange_diamond')
  let g:gitgutter_sign_removed = emoji#for('small_red_triangle')
  let g:gitgutter_sign_modified_removed = emoji#for('collision')
endif
" }}}
" Autocommands {{{1
"augroup emmet " Plugin: emmet-vim {{{2
  "autocmd!
  "let g:user_emmet_install_global = 0
  "autocmd FileType html,sass,scss,css EmmetInstall
"augroup END " }}}2
augroup emoji " Plugin: vim-emoji {{{2
  autocmd!
  autocmd FileType markdown setlocal completefunc=emoji#complete
augroup END " }}}2
augroup git " {{{2
  autocmd!
  " commit message
  autocmd Filetype gitcommit setlocal spell textwidth=72
augroup END" }}}2
augroup jsbeautify " Plugin: vim-jsbeautify {{{2
  autocmd!
  autocmd FileType javascript noremap <buffer>  <c-f> :call JsBeautify()<CR>
  autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<CR>
  autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<CR>
  autocmd FileType javascript vnoremap <buffer>  <c-f> :call RangeJsBeautify()<CR>
  autocmd FileType html vnoremap <buffer> <c-f> :call RangeHtmlBeautify()<CR>
  autocmd FileType css vnoremap <buffer> <c-f> :call RangeCSSBeautify()<CR>
augroup END
" }}}2
augroup markdown " {{{2
  autocmd!
  " force *.md as MarkDown, https://github.com/tpope/vim-markdown
  autocmd BufNewFile,BufReadPost *.md set filetype=markdown
  " turn on spell checking for markdown files
  autocmd BufRead,BufNewFile *.md setlocal spell
augroup END " }}}2
augroup nerdtree " Plugin: NERDTree {{{2
  autocmd!
  autocmd vimenter * if !argc() | NERDTree | endif
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
augroup END " }}}2
augroup rainbow_parentheses " Plugin: rainbow_parentheses {{{2
  autocmd!
  autocmd VimEnter * RainbowParenthesesActivate
  autocmd BufEnter * RainbowParenthesesLoadRound
  autocmd BufEnter * RainbowParenthesesLoadSquare
  autocmd BufEnter * RainbowParenthesesLoadBraces
augroup END " }}}2
" }}}1

" Auto-save a file when you leave insert mode
autocmd InsertLeave,TextChanged * if expand('%') != '' | update | endif

" Temporarily disabled {{{
" cut down key stroke for normal mode
" but lose the capability for repeating the linewise character search
"nnoremap ; :

" enable code folding by "vim-javascript-syntax'
"au FileType javascript call JavaScriptFold()

" copy from easy-motion
"let g:EasyMotion_do_mapping = 0 " Disable default mappings

" cut down key stroke for normal mode
" but lose the capability for repeating the linewise character search
"nnoremap ; :

" bind K to grep word under cursor
"nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
" }}}

" Local config
if filereadable($HOME . "/.vimrc.local")
  source ~/.vimrc.local
endif


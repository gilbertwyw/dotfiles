set nocompatible
" otherwise NERDTree shows strange character instead of arrows
set encoding=utf-8

syntax on
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Vundle, install under ~/.vim/bundle/
Plugin 'Lokaltog/vim-easymotion'
Plugin 'SirVer/ultisnips'
" snippets; used with 'ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'Valloric/YouCompleteMe'
Plugin 'Valloric/MatchTagAlways'
Plugin 'Yggdroot/indentLine'
Plugin 'airblade/vim-gitgutter'
Plugin 'bling/vim-airline'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'gmarik/vundle'
Plugin 'goldfeld/vim-seek'
Plugin 'junegunn/vim-easy-align'
Plugin 'junegunn/vim-emoji'
Plugin 'kien/ctrlp.vim'
Plugin 'myusuf3/numbers.vim'
Plugin 'Raimondi/delimitMate'
Plugin 'rking/ag.vim'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/syntastic'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'tommcdo/vim-exchange'
Plugin 'tpope/vim-abolish'
Plugin 'tpope/vim-characterize'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-sensible'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-unimpaired'
" Git
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-git'
" Front-End
Plugin 'ap/vim-css-color'
Plugin 'digitaltoad/vim-jade'
Plugin 'maksimr/vim-jsbeautify'
Plugin 'mattn/emmet-vim'
Plugin 'othree/html5.vim'
" Javascript & Node.js
Plugin 'jelera/vim-javascript-syntax'
Plugin 'kchmck/vim-coffee-script'
Plugin 'marijnh/tern_for_vim'
Plugin 'moll/vim-node'
" colorscheme
Plugin 'chriskempson/tomorrow-theme', {'rtp': 'vim/'}
Plugin 'daylerees/colour-schemes', {'rtp': 'vim/'}

colorscheme Tomorrow-Night

filetype plugin indent on

let mapleader=","

" ~/.vimrc
" *** The Right Hand system ***
" in INSERT mode, escape to NORMAL mode
inoremap ;l <Esc>
" in INSERT mode, save & back to NORMAL mode
inoremap ;k <Esc>:update<CR>
" in INSERT mode, save & back to INSERT mode
inoremap ;j <C-O>:update<CR>
" in NORMAL mode, save & back to NORMAL mode
nnoremap ;j :update<CR>

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" Allow hidden buffers, don't limit to 1 file per window/split
set hidden

set number

" turn off backup for now
set nobackup
set noswapfile

" change the terminal's title
set title

set hlsearch
set ignorecase
set smartcase

" use soft tab
set expandtab
set tabstop=2
" number of space to use for autoindenting
set shiftwidth=2

" toggle paste mode
set pastetoggle=<F2>

" enable mouse in all modes
set mouse=a

" cut down key stroke for normal mode
"nnoremap ; :

" Disable all arrow keys
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" Easy pane navigation
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" git commit message
autocmd Filetype gitcommit setlocal spell textwidth=72

" turn on spell checking for markdown files
autocmd BufRead,BufNewFile *.md setlocal spell

" turn off search highlight
nnoremap <silent> <leader><space> :noh<CR>

" The Silver Searcher, http://robots.thoughtbot.com/faster-grepping-in-vim/
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" ctrlp
let g:ctrlp_working_path_mode = 'ra'

" emmet-vim, enable just for html/css
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall

" NERDTree
autocmd vimenter * if !argc() | NERDTree | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" NERDTree mirror mode by default
map <silent> <leader>n :NERDTreeToggle<CR> :NERDTreeMirror<CR>

let NERDTreeIgnore=['\.sublime-*']

" numbers.vim
nnoremap <F3> :NumbersToggle<CR>
nnoremap <F4> :NumbersOnOff<CR>

" vim-easy-align
" Start interactive EasyAlign in visual mode
vmap <Enter> <Plug>(EasyAlign)
" Start interactive EasyAlign with a Vim movement
nmap <Leader>a <Plug>(EasyAlign)

" vim-jsbeautify
autocmd FileType javascript noremap <buffer>  <c-f> :call JsBeautify()<cr>
autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>
autocmd FileType javascript vnoremap <buffer>  <c-f> :call RangeJsBeautify()<cr>
autocmd FileType html vnoremap <buffer> <c-f> :call RangeHtmlBeautify()<cr>
autocmd FileType css vnoremap <buffer> <c-f> :call RangeCSSBeautify()<cr>

" tern_for_vim
let g:tern_show_argument_hints='on_hold'
nmap <Leader>tD :TernDoc<cr>
nmap <Leader>tb :TernDocBrowse<cr>
nmap <Leader>td :TernDef<cr>
nmap <Leader>tr :TernRefs<cr>
nmap <Leader>tR :TernRename<cr>

" enable code folding by "vim-javascript-syntax'
"au FileType javascript call JavaScriptFold()

" to avoid conflict with YouCompleteMe
set rtp+=~/dotfiles/vim/
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsSnippetsDir="~/dotfiles/vim/snips/"
let g:UltiSnipsSnippetDirectories=["UltiSnips", "snips"]

" syntastic
let g:syntastic_javascript_checkers = ['jsxhint']

" vim-emoji
"   - enable only when editing Markdown files
"   - trigger by CTRL-X CTRL-U in INSERT mode with terminal vim
augroup emoji_complete
  autocmd!
  autocmd FileType markdown setlocal completefunc=emoji#complete
augroup END

" Using Emojis as Git Gutter symbols, work only with terminal vim(?)
silent! if emoji#available()
  let g:gitgutter_sign_added = emoji#for('small_blue_diamond')
  let g:gitgutter_sign_modified = emoji#for('small_orange_diamond')
  let g:gitgutter_sign_removed = emoji#for('small_red_triangle')
  let g:gitgutter_sign_modified_removed = emoji#for('collision')
endif

" SHIFT + direction to change tab
noremap <S-l> gt
noremap <S-h> gT

nnoremap <leader>ev :vsp $MYVIMRC<CR>

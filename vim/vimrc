" vim:fdm=marker

let s:darwin = has('mac')

set nocompatible
" otherwise NERDTree shows strange character instead of arrows
set encoding=utf-8

" Allow hidden buffers, don't limit to 1 file per window/split
set hidden

" enable hybrid line number mode
set relativenumber
set number

" more intuitive split
set splitbelow
set splitright

" turn off backup for now
set nobackup
set noswapfile

" change the terminal's title
set title

if (exists('+colorcolumn'))
  set colorcolumn=80
endif

" enable mouse in all modes
if has('mouse')
  set mouse=a
endif

" flashing instead of beeping
set visualbell

let mapleader = "\<Space>"

" True color {{{
" : CTRL-v + ESC
set t_8f=[38;2;%lu;%lu;%lum
set t_8b=[48;2;%lu;%lu;%lum
set termguicolors
" }}}
" Indentation {{{
" use soft tab
set expandtab
" number of visual spaces per TAB
set tabstop=2
" number of space to use for autoindenting
set shiftwidth=2
" }}}
" Mappings {{{1
" Command-line {{{2
cmap w!! w !sudo tee > /dev/null %
" }}}2
" Insert {{{2
" jk is escape
inoremap jk <Esc>

" make last typed word uppercase
inoremap <Plug>UpCase <Esc>hgUaweA
imap ;u <Plug>UpCase
" }}}2
" Normal {{{2
" select whatever's just been pasted
nnoremap gV `[V`]

" move vertically by visual line
nnoremap j gj
nnoremap k gk

" Toggle fold at current position
nnoremap <Tab> za

" swap the jump keys
nnoremap ' `
nnoremap ` '

" Quickly edit/reload the vimrc file
nnoremap <leader>ev :e $MYVIMRC<CR>
nnoremap <leader>sv :so $MYVIMRC<CR>

nnoremap <leader>w :w<cr>

" Resize window
nnoremap <Left> :vertical resize +2<CR>
nnoremap <Right> :vertical resize -2<CR>
nnoremap <Up> :resize -2<CR>
nnoremap <Down> :resize +2<CR>

" Learn the following 2 from Damian Conway
" 1) exchange 'S' for:
nmap  S  :%s//g<LEFT><LEFT>
" 2) exchange 'M' for:
nmap <expr>  M  ':%s/' . @/ . '//g<LEFT><LEFT>'

noremap <silent> <F4> :let @+=expand("%:p")<CR>

" add filetype
nnoremap gaf :set ft+=.

" search will center on the line it's found in.
nnoremap n nzzzv
nnoremap N Nzzzv

nnoremap <silent> <leader>lo :lopen<CR>

if s:darwin
  " try to open the current file in default application
  nnoremap <leader>o :silent !open '%'<cr>
endif
" }}}2
" Visual {{{2
" http://vim-jp.org/blog/2015/06/30/visual-ctrl-a-ctrl-x.html
" not work on Neovim yet
vnoremap <c-a> <c-a>gv
vnoremap <c-x> <c-x>gv

vnoremap Y "*y

" Visual shifting (does not exit Visual mode)
vnoremap > >gv
vnoremap < <gv
" }}}2
" }}}1
" Search {{{
set hlsearch
set ignorecase
set smartcase
" }}}
" Plugin: vim-plug {{{
"https://github.com/junegunn/vim-plug/wiki/faq#automatic-installation
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" vim-plug, install under ~/.vim/plugged
call plug#begin('~/.vim/plugged')
" Plugins {{{
" General {{{
Plug 'AndrewRadev/splitjoin.vim'
Plug 'ConradIrwin/vim-bracketed-paste'
Plug 'Lokaltog/vim-easymotion'
Plug 'Raimondi/delimitMate'
Plug 'Valloric/MatchTagAlways'
Plug 'Yggdroot/indentLine'
Plug 'airblade/vim-rooter'
Plug 'bling/vim-airline'
Plug 'editorconfig/editorconfig-vim'
Plug 'embear/vim-localvimrc'
Plug 'flowtype/vim-flow'
Plug 'haya14busa/incsearch.vim'
Plug 'haya14busa/vim-asterisk'
Plug 'honza/dockerfile.vim'
Plug 'janko-m/vim-test'
Plug 'jpalardy/vim-slime'
" Use installed 'fzf' from Homebrew
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-easy-align', { 'on': ['<Plug>(EasyAlign)', 'EasyAlign'] }
Plug 'junegunn/vim-emoji'
Plug 'kannokanno/previm'
Plug 'keith/investigate.vim'
Plug 'kien/rainbow_parentheses.vim'
Plug 'kshenoy/vim-signature'
Plug 'mhinz/vim-grepper', { 'on': ['Grepper', '<plug>(GrepperOperator)'] }
Plug 'sbdchd/neoformat'
Plug 'scrooloose/nerdtree'
Plug 'sjl/gundo.vim'
Plug 'terryma/vim-expand-region'
Plug 'tommcdo/vim-exchange'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-characterize'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rsi'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tyru/open-browser.vim'
Plug 'unblevable/quick-scope'
Plug 'wellle/targets.vim'
Plug 'w0rp/ale'
" }}}
" vim-operator-flashy {{{
Plug 'kana/vim-operator-user'
Plug 'haya14busa/vim-operator-flashy'
" }}}
" syntax {{{
Plug 'cakebaker/scss-syntax.vim'
Plug 'digitaltoad/vim-pug', { 'for': 'pug' }
Plug 'hail2u/vim-css3-syntax'
Plug 'othree/html5.vim'
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
" requires 'pangloss/vim-javascript'
Plug 'MaxMEllon/vim-jsx-pretty'
" }}}
" colorscheme {{{
Plug 'NLKNguyen/papercolor-theme'
Plug 'chriskempson/tomorrow-theme', { 'rtp': 'vim' }
Plug 'itchyny/landscape.vim'
Plug 'junegunn/seoul256.vim'
Plug 'nanotech/jellybeans.vim'
Plug 'romainl/Apprentice'
Plug 'tomasr/molokai'
Plug 'dracula/vim', { 'as': 'dracula-vim' }
" }}}
" Ctags {{{
Plug 'ludovicchabant/vim-gutentags'
Plug 'majutsushi/tagbar'
" }}}
" Git {{{
Plug 'airblade/vim-gitgutter'
Plug 'low-ghost/nerdtree-fugitive'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-git'
Plug 'tpope/vim-rhubarb'
Plug 'Xuyuanp/nerdtree-git-plugin'
" }}}
" Front-End {{{
Plug 'ap/vim-css-color', { 'for': ['css', 'scss'] }
Plug 'heavenshell/vim-jsdoc', { 'for': 'javascript' }
Plug 'marijnh/tern_for_vim', { 'do': 'npm i' }
Plug 'mattn/emmet-vim'
Plug 'mvolkmann/vim-js-arrow-function', { 'for': 'javascript' }
Plug 'moll/vim-node'
" }}}
" snippets {{{
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
" }}}
" tmux {{{
Plug 'benmills/vimux'
Plug 'christoomey/vim-tmux-navigator'
Plug 'edkolev/tmuxline.vim'
Plug 'tmux-plugins/vim-tmux'
Plug 'wellle/tmux-complete.vim'
" }}}
" Elixir {{{
Plug 'elixir-lang/vim-elixir', { 'for': ['elixir', 'eelixir'] }
" }}}
" Elm {{{
Plug 'ElmCast/elm-vim', { 'for': ['elm'] }
" }}}
" }}}
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
call plug#end()
" }}}
" Plugin: ale {{{
" https://github.com/w0rp/ale#5v-how-can-i-change-the-format-for-echo-messages
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
" }}}
" Plugin: deoplete.nvim {{{
" https://github.com/Shougo/deoplete.nvim#installation
let g:deoplete#enable_at_startup = 1
" }}}
" Plugin: EasyMotion {{{
" Bi-directional 2-character search
" s{char}{char} to move to {char}{char}
nmap s <Plug>(easymotion-overwin-f2)
" Turn on case sensitive feature
let g:EasyMotion_smartcase = 1
" JK motions: Line motions
map <leader>j <Plug>(easymotion-j)
map <leader>k <Plug>(easymotion-k)
" }}}
" Plugin: editorconfig {{{
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']
" }}}
" Plugin: fzf {{{
let g:fzf_files_options =
  \ '--preview "(highlight -O ansi {} || cat {}) 2> /dev/null | head -'.&lines.'"'
nnoremap <silent> <C-p> :FZF --cycle<CR>
" }}}
" Plugin: fzf.vim {{{
nnoremap <leader>C :Colors<CR>
nnoremap <leader>b :Buffers<CR>
nnoremap <leader>ft :Filetypes<CR>
nnoremap <leader>gf :GFiles<CR>
nnoremap <leader>nm :Maps<CR>
nnoremap <leader>s :Snippets<CR>
nnoremap <leader>t :Tags<CR>
" }}}
" Plugin: gundo.vim {{{
nnoremap <leader>u :GundoToggle<CR>
if has('python3')
  let g:gundo_prefer_python3 = 1
endif
" }}}
" Plugin: incsearch {{{
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
" turns 'hlsearch' off automatically after searching-related motions
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)
" }}}
" Plugin: indentLine {{{
let g:indentLine_conceallevel=0
" }}}
" Plugin: investigate.vim {{{
if s:darwin
  let g:investigate_use_dash=1
endif
" }}}
" Plugin: neoformat {{{
augroup neoformat
  autocmd!
  " https://github.com/sbdchd/neoformat#supported-filetypes
  " https://github.com/sbdchd/neoformat#managing-undo-history
  autocmd BufWritePre * undojoin | Neoformat
augroup END
nnoremap <silent> <leader>gq :Neoformat<CR>
vnoremap <silent> <leader>gq :Neoformat<CR>
" }}}
" Plugin: nerdtree {{{
augroup nerdtree
  autocmd!
  let g:NERDTreeHijackNetrw = 0
  map <silent> <leader>n :NERDTreeToggle<CR> :NERDTreeMirror<CR>
  map <silent> <leader>nf :NERDTreeFind<CR>
  " open a NERDTree automatically when vim starts up if no files were specified
  "autocmd StdinReadPre * let s:std_in=1
  "autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

  " close vim if the only window left open is a NERDTree
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
augroup END
" }}}
" Plugin: open-browser.vim {{{
let g:netrw_nogx = 1 " disable netrw's gx mapping.
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)
" }}}
" Plugin: previm {{{
nnoremap <silent> <leader>pv :PrevimOpen<CR>
" }}}
" Plugin: quick-scope {{{
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
" }}}
" Plugin: rainbow_parentheses.vim {{{
augroup rainbow_parentheses.vim
  autocmd!
  autocmd VimEnter * RainbowParenthesesActivate
  autocmd BufEnter * RainbowParenthesesLoadRound
  autocmd BufEnter * RainbowParenthesesLoadSquare
  autocmd BufEnter * RainbowParenthesesLoadBraces
augroup END
" }}}
" Plugin: scss-syntax.vim {{{
augroup scss-syntax.vim
  autocmd!
  autocmd FileType scss setlocal iskeyword+=-
augroup END
" }}}
" Plugin: tagbar {{{
nmap <F8> :TagbarToggle<CR>
let g:tagbar_type_markdown = {
    \ 'ctagstype': 'markdown',
    \ 'ctagsbin' : 'markdown2ctags',
    \ 'ctagsargs' : '-f - --sort=yes',
    \ 'kinds' : [
        \ 's:sections',
        \ 'i:images'
    \ ],
    \ 'sro' : '|',
    \ 'kind2scope' : {
        \ 's' : 'section',
    \ },
    \ 'sort': 0,
\ }
" }}}
" Plugin: tern_for_vim {{{
let maplocalleader=','
let g:tern_map_keys=1
let g:tern_show_argument_hints='on_hold'
" }}}
" Plugin: tmux-complete.vim {{{
" https://github.com/wellle/tmux-complete.vim#settings
let g:tmuxcomplete#trigger = ''
" }}}
" Plugin: tmuxline.vim {{{
let g:tmuxline_theme = 'airline'
let g:tmuxline_powerline_separators = 0
" }}}
" Plugin: UltiSnips {{{
set rtp+=~/dotfiles/vim/
let g:UltiSnipsEditSplit='vertical'
let g:UltiSnipsSnippetsDir='~/dotfiles/vim/snips/'
let g:UltiSnipsSnippetDirectories=['UltiSnips', 'snips']
" }}}
" Plugin: vim-airline {{{
" make symbols look okay
let g:airline_powerline_fonts = 1
" }}}
" Plugin: vim-asterisk {{{
let g:asterisk#keeppos = 1
map *   <Plug>(asterisk-*)
map #   <Plug>(asterisk-#)
map g*  <Plug>(asterisk-g*)
map g#  <Plug>(asterisk-g#)
map z*  <Plug>(asterisk-z*)
map gz* <Plug>(asterisk-gz*)
map z#  <Plug>(asterisk-z#)
map gz# <Plug>(asterisk-gz#)
" }}}
" Plugin: vim-css3-syntax {{{
augroup vim-css3-syntax
  autocmd!
  " Plugin: vim-css3-syntax
  autocmd FileType css setlocal iskeyword+=-
augroup END
" }}}
" Plugin: vim-dispatch {{{
autocmd FileType html let b:dispatch = '!open %:p'
nnoremap <F9> :Dispatch<CR>
" }}}
" Plugin: vim-easy-align {{{
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap gaa <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap gaa <Plug>(EasyAlign)
" }}}
" Plugin: vim-emoji {{{
" trigger by CTRL-X CTRL-U in INSERT mode with terminal vim
" Using Emojis as Git Gutter symbols, work only with terminal vim(?)
silent! if emoji#available()
  let g:gitgutter_sign_added = emoji#for('small_blue_diamond')
  let g:gitgutter_sign_modified = emoji#for('small_orange_diamond')
  let g:gitgutter_sign_removed = emoji#for('small_red_triangle')
  let g:gitgutter_sign_modified_removed = emoji#for('collision')
endif
" }}}
" Plugin: vim-expand-region {{{
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)
" }}}
" Plugin: vim-fugitive {{{
nmap <leader>gb :Gblame<cr>
nmap <leader>gs :Gstatus<cr>
" }}}
" Plugin: vim-grepper {{{
nnoremap <leader>ag :Grepper -tool ag -highlight<cr>
nmap gs <plug>(GrepperOperator)
xmap gs <plug>(GrepperOperator)
" }}}
" Plugin: vim-javascript {{{
let g:javascript_conceal_function   = 'ƒ'
let g:javascript_conceal_null       = 'ø'
let g:javascript_conceal_this       = '@'
let g:javascript_conceal_return     = '⇚'
let g:javascript_conceal_undefined  = '¿'
let g:javascript_conceal_NaN        = 'ℕ'
let g:javascript_conceal_prototype  = '¶'
let g:javascript_conceal_static     = '•'
let g:javascript_conceal_super      = 'Ω'
" }}}
" Plugin: vim-jsdoc {{{
let g:jsdoc_allow_input_prompt = 1
" reserve <C-l> for the mapping used by 'vim-tmux-navigator'
let g:jsdoc_default_mapping    = 0
" }}}
" Plugin: vim-localvimrc {{{
" https://github.com/embear/vim-localvimrc#the-glocalvimrc_persistent-setting
let g:localvimrc_persistent=1
" }}}
" Plugin: vim-operator-flashy {{{
map y <Plug>(operator-flashy)
nmap Y <Plug>(operator-flashy)$
" }}}
" Plugin: vim-signature {{{
nnoremap ]" :<C-U>call signature#mark#Goto("next", "spot", "global")<CR>
nnoremap [" :<C-U>call signature#mark#Goto("prev", "spot", "global")<CR>
" }}}
" Plugin: vim-slime {{{
let g:slime_target = 'tmux'
" }}}
" Plugin: vim-test {{{
let test#strategy = 'dispatch'
nmap <silent> <leader>tn :TestNearest<CR>
nmap <silent> <leader>tf :TestFile<CR>
nmap <silent> <leader>ts :TestSuite<CR>
nmap <silent> <leader>tl :TestLast<CR>
nmap <silent> <leader>tv :TestVisit<CR>
" }}}
" Plugin: vimux {{{
" horizontal is vertical here
let g:VimuxOrientation = 'h'
" in percentage
let g:VimuxHeight = "40"
map <Leader>vp :VimuxPromptCommand<CR>
map <Leader>vl :VimuxRunLastCommand<CR>
map <Leader>vi :VimuxInspectRunner<CR>
" }}}
" Autocommands {{{1
augroup ag " {{{2
  autocmd!
  autocmd BufNewFile,BufReadPost .agignore setlocal commentstring=#\ %s
augroup END " }}} 2
augroup autoSaveAndRead " {{{2
  autocmd!
  autocmd TextChanged,InsertLeave,FocusLost * silent! wall
  autocmd CursorHold * silent! checktime
augroup END " }}} 2
augroup docker " {{{2
  autocmd!
  " reference: https://github.com/docker/docker/blob/master/contrib/syntax/vim/ftdetect/dockerfile.vim
  autocmd BufNewFile,BufRead [Dd]ockerfile,Dockerfile.* set filetype=dockerfile
augroup END " }}}2
augroup git " {{{2
  autocmd!
  " commit message
  autocmd FileType gitcommit setlocal spell textwidth=72
augroup END " }}}2
augroup javascript " {{{2
  autocmd!
  " for '/tpope/vim-commentary' on JSX
  autocmd FileType javascript.jsx setlocal commentstring={/*\ %s\ */}
augroup END " }}} 2
augroup json " {{{2
  autocmd!
  autocmd BufRead,BufNewFile .bowerrc setlocal ft=json
augroup END " }}} 2
augroup markdown " {{{2
  autocmd!
  " force *.md as MarkDown, https://github.com/tpope/vim-markdown
  autocmd BufNewFile,BufReadPost *.md set filetype=markdown
  " highlight markdown fenced code syntax
  let g:markdown_fenced_languages = ['html', 'json', 'python', 'scss', 'sh', 'sql', 'yaml']
augroup END " }}}2
augroup xml " {{{2
  autocmd!
  autocmd FileType xml setlocal foldmethod=syntax
  let g:xml_syntax_folding=1
augroup END " }}} 2
" }}}1
" Use persistent history {{{
let s:undo_dir = $TMPDIR . '.vim-undo-dir'

if !isdirectory(s:undo_dir)
  call mkdir(s:undo_dir, "", 0700)
endif

let &undodir = s:undo_dir
set undofile
" }}}
" Neovim-specific {{{
if has('nvim')
  " save screen estate
  let $FZF_DEFAULT_OPTS = $FZF_DEFAULT_OPTS.' --inline-info'

  " https://github.com/christoomey/vim-tmux-navigator#it-doesnt-work-in-neovim-specifically-c-h
  nnoremap <silent> <BS> :TmuxNavigateLeft<cr>

endif
" }}}



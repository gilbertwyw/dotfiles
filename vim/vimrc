" vim:fdm=marker
set nocompatible
" otherwise NERDTree shows strange character instead of arrows
set encoding=utf-8

" Plugin: vim-plug {{{
"https://github.com/junegunn/vim-plug/wiki/faq#automatic-installation
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall
endif

" vim-plug, install under ~/.vim/plugged
call plug#begin('~/.vim/plugged')
" Plugins {{{
" General {{{
Plug 'Lokaltog/vim-easymotion'
Plug 'Raimondi/delimitMate'
Plug 'Shougo/unite.vim'
Plug 'Valloric/MatchTagAlways'
Plug 'Valloric/YouCompleteMe', { 'do': './install.sh' }
Plug 'Yggdroot/indentLine'
Plug 'airblade/vim-gitgutter'
Plug 'bling/vim-airline'
Plug 'editorconfig/editorconfig-vim'
Plug 'haya14busa/incsearch.vim'
Plug 'haya14busa/vim-asterisk'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install' }
Plug 'junegunn/vim-easy-align'
Plug 'junegunn/vim-emoji'
Plug 'kien/rainbow_parentheses.vim'
Plug 'kshenoy/vim-signature'
Plug 'majutsushi/tagbar'
Plug 'myusuf3/numbers.vim'
Plug 'rking/ag.vim'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'scrooloose/syntastic'
Plug 'sjl/gundo.vim'
Plug 'szw/vim-g'
Plug 'terryma/vim-expand-region'
Plug 'terryma/vim-multiple-cursors'
Plug 'tommcdo/vim-exchange'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-characterize'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rsi'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
" }}}
" colorscheme {{{
Plug 'NLKNguyen/papercolor-theme'
Plug 'chriskempson/base16-vim'
Plug 'chriskempson/tomorrow-theme', { 'rtp': 'vim' }
Plug 'daylerees/colour-schemes', { 'rtp': 'vim' }
Plug 'flazz/vim-colorschemes'
Plug 'godlygeek/csapprox'
Plug 'google/vim-colorscheme-primary'
Plug 'itchyny/landscape.vim'
Plug 'junegunn/seoul256.vim'
" }}}
" Git {{{
Plug 'low-ghost/nerdtree-fugitive'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-git'
Plug 'Xuyuanp/nerdtree-git-plugin'
" }}}
" Front-End {{{
Plug 'ap/vim-css-color', { 'for': ['css', 'scss', 'sass'] }
Plug 'digitaltoad/vim-jade', { 'for': 'jade' }
Plug 'heavenshell/vim-jsdoc', { 'for': 'javascript' }
Plug 'jelera/vim-javascript-syntax', { 'for': 'javascript' }
Plug 'kchmck/vim-coffee-script', { 'for': 'coffee' }
Plug 'maksimr/vim-jsbeautify'
Plug 'marijnh/tern_for_vim', { 'do': 'npm i' }
Plug 'mattn/emmet-vim'
Plug 'moll/vim-node'
Plug 'othree/html5.vim'
" }}}
" snippets {{{
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
" }}}
" tmux {{{
Plug 'benmills/vimux'
Plug 'christoomey/vim-tmux-navigator'
Plug 'edkolev/tmuxline.vim'
Plug 'wellle/tmux-complete.vim'
" }}}
" Unite's deps {{{
Plug 'Shougo/neomru.vim'
Plug 'Shougo/vimproc.vim', { 'do': 'make' }
" }}}
" clojure & clojurescript {{{
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }
Plug 'vim-scripts/paredit.vim', { 'for': 'clojure' }
" }}}
" }}}
call plug#end()
" }}}

" Allow hidden buffers, don't limit to 1 file per window/split
set hidden

set number

" turn off backup for now
set nobackup
set noswapfile

" change the terminal's title
set title

" highlight current line
set cursorline

if (exists('+colorcolumn'))
  set colorcolumn=80
endif

" enable mouse in all modes
if has('mouse')
  set mouse=a
endif

" flashing instead of beeping
set visualbell

" toggle paste mode
set pastetoggle=<F2>

let mapleader = "\<Space>"

" Indentation {{{
" use soft tab
set expandtab
" number of visual spaces per TAB
set tabstop=2
" number of space to use for autoindenting
set shiftwidth=2
" }}}
" Mappings {{{
cmap w!! w !sudo tee > /dev/null %

nmap <F7> :silent only<CR>

" jk is escape
inoremap jk <Esc>

" move vertically by visual line
nnoremap j gj
nnoremap k gk

" swap the jump keys
nnoremap ' `
nnoremap ` '

" Part of the Right Hand system, http://reefpoints.dockyard.com/2013/09/11/vim-staying-on-home-row-via-map.html
" in INSERT mode, save & back to INSERT mode
inoremap ;j <C-O>:update<CR>
" in NORMAL mode, save & back to NORMAL mode
nnoremap ;j :update<CR>

" Quickly edit/reload the vimrc file
nnoremap <leader>ev :e $MYVIMRC<CR>
nnoremap <leader>sv :so $MYVIMRC<CR>

" Disable all arrow keys
noremap <Up>    <NOP>
noremap <Down>  <NOP>
noremap <Left>  <NOP>
noremap <Right> <NOP>

vnoremap Y "*y
" In normal mode, do the same with the current line
nnoremap Y "*yy

if has('macunix')
  " try to open the current file in default application
  nnoremap <leader>o :silent !open '%'<cr>
endif
" }}}
" Navigation {{{
" Tab {{{
noremap <S-l> gt
noremap <S-h> gT
" }}}
" }}}
" Search {{{
set hlsearch
set ignorecase
set smartcase
" Plugin: incsearch {{{2
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
" turns 'hlsearch' off automatically after searching-related motions
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)
" }}}2
" Plugin: vim-asterisk {{{2
map *   <Plug>(asterisk-*)
map #   <Plug>(asterisk-#)
map g*  <Plug>(asterisk-g*)
map g#  <Plug>(asterisk-g#)
map z*  <Plug>(asterisk-z*)
map gz* <Plug>(asterisk-gz*)
map z#  <Plug>(asterisk-z#)
map gz# <Plug>(asterisk-gz#)
" }}}2
" }}}
" Plugin: ag.vim {{{
nnoremap <leader>g :Ag -i<space>
" }}}
" Plugin: EasyMotion {{{
" Bi-directional 2-character search
" `s{char}{char}{label}`
nmap s <Plug>(easymotion-s2)
" Turn on case sensitive feature
let g:EasyMotion_smartcase = 1
" JK motions: Line motions
map <leader>j <Plug>(easymotion-j)
map <leader>k <Plug>(easymotion-k)
" }}}
" Plugin: editorconfig {{{
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']
" }}}
" Plugin: fzf {{{
nnoremap <silent> <C-p> :FZF --cycle<CR>
" }}}
" Plugin: gundo.vim {{{
nnoremap <F5> :GundoToggle<CR>
" }}}
" Plugin: numbers.vim {{{
nnoremap <F3> :NumbersToggle<CR>
nnoremap <F4> :NumbersOnOff<CR>
" }}}
" Plugin: syntastic {{{
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" :h syntastic-fish
let g:syntastic_shell = '/bin/zsh'
let g:syntastic_aggregate_errors = 0
let g:syntastic_javascript_checkers = ['eslint', 'jsxhint']
" }}}
" Plugin: tagbar {{{
nmap <F8> :TagbarToggle<CR>
let g:tagbar_type_coffee = {
    \ 'ctagstype' : 'coffee',
    \ 'kinds'     : [
        \ 'c:classes',
        \ 'm:methods',
        \ 'f:functions',
        \ 'v:variables',
        \ 'f:fields',
    \ ]
\ }
let g:tagbar_type_markdown = {
    \ 'ctagstype' : 'markdown',
    \ 'kinds' : [
        \ 'h:Heading_L1',
        \ 'i:Heading_L2',
        \ 'k:Heading_L3'
    \ ]
\ }
" }}}
" Plugin: tern_for_vim {{{
let g:tern_show_argument_hints='on_hold'
nmap <leader>tD :TernDoc<CR>
nmap <leader>tb :TernDocBrowse<CR>
nmap <leader>td :TernDef<CR>
nmap <leader>tr :TernRefs<CR>
nmap <leader>tR :TernRename<CR>
" }}}
" Plugin: tmux-complete.vim {{{
let g:tmuxcomplete#trigger = 'omnifunc'
" }}}
" Plugin: tmuxline.vim {{{
let g:tmuxline_theme = 'airline'
let g:tmuxline_powerline_separators = 0
" }}}
" Plugin: UltiSnips {{{
" to avoid conflict with YouCompleteMe
set rtp+=~/dotfiles/vim/
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsSnippetsDir="~/dotfiles/vim/snips/"
let g:UltiSnipsSnippetDirectories=["UltiSnips", "snips"]
" }}}
" Plugin: Unite {{{
nnoremap <leader>b :<C-u>Unite buffer<CR>
nnoremap <leader>f :<C-u>Unite file_mru buffer file<CR>

" recursive file search, start insert automatically and using fuzzy file matching
call unite#filters#matcher_default#use(['matcher_fuzzy'])
nnoremap <leader>r :<C-u>Unite -start-insert file_rec/async:!<CR>

let g:unite_source_file_rec_max_cache_files = 0
call unite#custom#source('file_rec,file_rec/async', 'max_candidates', 0)

" search through yank history
let g:unite_source_history_yank_enable = 1
nnoremap <leader>y :<C-u>Unite history/yank<CR>

if executable('ag')
  " Use ag in unite grep source.
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts =
  \ '-i --line-numbers --nocolor --nogroup --hidden --ignore ' .
  \  '''.hg'' --ignore ''.svn'' --ignore ''.git'' --ignore ''.bzr'''
  let g:unite_source_grep_recursive_opt = ''
  let g:unite_source_rec_async_command =
  \ 'ag --follow --nocolor --nogroup --hidden -g ""'
elseif executable('pt')
  let g:unite_source_grep_command = 'pt'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor'
  let g:unite_source_grep_recursive_opt = ''
  let g:unite_source_grep_encoding = 'utf-8'
  " not ignoring .gitignore files
  let g:unite_source_rec_async_command = 'pt --nocolor --nogroup -g .'
endif
" }}}
" Plugin: vim-dispatch {{{
autocmd FileType html let b:dispatch = '!open %:p'
nnoremap <F9> :Dispatch<CR>
" }}}
" Plugin: vim-easy-align {{{
" Start interactive EasyAlign in visual mode
vmap <Enter> <Plug>(EasyAlign)
" Start interactive EasyAlign with a Vim movement
nmap <leader>a <Plug>(EasyAlign)
" }}}
" Plugin: vim-emoji {{{
" trigger by CTRL-X CTRL-U in INSERT mode with terminal vim
" Using Emojis as Git Gutter symbols, work only with terminal vim(?)
silent! if emoji#available()
  let g:gitgutter_sign_added = emoji#for('small_blue_diamond')
  let g:gitgutter_sign_modified = emoji#for('small_orange_diamond')
  let g:gitgutter_sign_removed = emoji#for('small_red_triangle')
  let g:gitgutter_sign_modified_removed = emoji#for('collision')
endif
" }}}
" Plugin: vim-expand-region {{{
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)
" }}}
" Plugin: vim-g {{{
let g:vim_g_command = "Go"
let g:vim_g_f_command = "Gf"
" }}}
" Plugin: vim-jsdoc {{{
let g:jsdoc_allow_input_prompt = 1
" reserve <C-l> for the mapping used by 'vim-tmux-navigator'
let g:jsdoc_default_mapping    = 0
" }}}
" Plugin: vim-signature {{{
nnoremap ]" :<C-U>call signature#mark#Goto("next", "spot", "global")<CR>
nnoremap [" :<C-U>call signature#mark#Goto("prev", "spot", "global")<CR>
" }}}
" Autocommands {{{1
"augroup emmet " Plugin: emmet-vim {{{2
  "autocmd!
  "let g:user_emmet_install_global = 0
  "autocmd FileType html,sass,scss,css EmmetInstall
"augroup END " }}}2
augroup emoji " Plugin: vim-emoji {{{2
  autocmd!
  autocmd FileType markdown setlocal completefunc=emoji#complete
augroup END " }}}2
augroup coffeescript " {{{2
  autocmd!
  "autocmd BufNewFile, BufReadPost * .coffee setl foldmethod=indent nofoldenable
  autocmd FileType coffee setl foldmethod=indent nofoldenable
  let coffee_compile_vert = 1
  let coffee_watch_vert   = 1
  autocmd FileType coffee noremap <buffer> <C-c>c :CoffeeCompile<cr>
  autocmd FileType coffee noremap <buffer> <C-c>r :CoffeeRun<cr>
  autocmd FileType coffee noremap <buffer> <C-c>w :CoffeeWatch<cr>
augroup END " }}}2
augroup git " {{{2
  autocmd!
  " commit message
  autocmd FileType gitcommit setlocal spell textwidth=72
augroup END " }}}2
augroup tmux " {{{2
  autocmd!
  map <leader>vp :VimuxPromptCommand<CR>
augroup END " }}}2
augroup jsbeautify " Plugin: vim-jsbeautify {{{2
  autocmd!
  autocmd FileType javascript noremap <buffer>  <c-f> :call JsBeautify()<CR>
  autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<CR>
  autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<CR>
  autocmd FileType javascript vnoremap <buffer>  <c-f> :call RangeJsBeautify()<CR>
  autocmd FileType html vnoremap <buffer> <c-f> :call RangeHtmlBeautify()<CR>
  autocmd FileType css vnoremap <buffer> <c-f> :call RangeCSSBeautify()<CR>
augroup END
" }}}2
augroup markdown " {{{2
  autocmd!
  " force *.md as MarkDown, https://github.com/tpope/vim-markdown
  autocmd BufNewFile,BufReadPost *.md set filetype=markdown
augroup END " }}}2
augroup nerdtree " Plugin: NERDTree {{{2
  autocmd!
  map <silent> <leader>n :NERDTreeToggle<CR> :NERDTreeMirror<CR>
  " open a NERDTree automatically when vim starts up if no files were specified
  "autocmd StdinReadPre * let s:std_in=1
  "autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

  " close vim if the only window left open is a NERDTree
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
augroup END " }}}2
augroup rainbow_parentheses " Plugin: rainbow_parentheses {{{2
  autocmd!
  autocmd VimEnter * RainbowParenthesesActivate
  autocmd BufEnter * RainbowParenthesesLoadRound
  autocmd BufEnter * RainbowParenthesesLoadSquare
  autocmd BufEnter * RainbowParenthesesLoadBraces
augroup END " }}}2
" }}}1

" Auto-save a file when you leave insert mode
autocmd InsertLeave,TextChanged * if expand('%') != '' | update | endif

" Temporarily disabled {{{
" cut down key stroke for normal mode
" but lose the capability for repeating the linewise character search
"nnoremap ; :

" enable code folding by "vim-javascript-syntax'
"au FileType javascript call JavaScriptFold()

" bind K to grep word under cursor
"nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
" }}}

" https://github.com/junegunn/fzf/wiki/Examples-(vim)#choose-color-scheme
" with '--reverse'
nnoremap <silent> <Leader>C :call fzf#run({
\   'source':
\     map(split(globpath(&rtp, "colors/*.vim"), "\n"),
\         "substitute(fnamemodify(v:val, ':t'), '\\..\\{-}$', '', '')"),
\   'sink':    'colo',
\   'options': '+m --reverse',
\   'left':    30
\ })<CR>

" Local config
if filereadable($HOME . "/.vimrc.local")
  source ~/.vimrc.local
endif

